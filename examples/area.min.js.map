{
  "version": 3,
  "sources": ["../area.js", "../bounds.js", "../chart.js"],
  "sourcesContent": ["/*\nArea chart\n*/\nimport { getBounds } from \"./bounds\";\nimport { Chart } from \"./chart\";\n\nexport class Area extends Chart {\n  parse(data) {\n    // TODO How to build the stack? Use the given category order?\n    // TODO Unique z values vs all z values?\n    this.Z = d3.map(data.z, (d) => d.name);\n\n    // Index the data by x, then by z for each x\n    const indexed = d3.index(\n      data.values,\n      (d) => d3.isoParse(d[0]),\n      (d) => d[2],\n    );\n\n    // TODO Where to apply a magnitude?\n\n    // Build the stack, one array per item, with an elem for each quarter\n    this.stack = d3\n      .stack()\n      .keys(this.Z)\n      .value(([, group], key) => {\n        let item = group.get(key);\n        return item ? item[1] : 0;\n      })(indexed);\n\n    // Use the stack to determine the x and y-axis domains\n    this.X = [...indexed.keys()];\n    this.Y = [0, d3.max(this.stack[this.stack.length - 1], (d) => d[1])];\n\n    this.setColors(data);\n  }\n\n  parseZ(data) {\n    return d3.map(data.values, (d) => d[2]);\n  }\n\n  getDomainX() {\n    return d3.extent(this.X);\n  }\n\n  getDomainY() {\n    return this.Y;\n  }\n\n  setColors(data) {\n    this.colors = data.z.reduce((obj, d) => {\n      obj[d.name] = d.color;\n      return obj;\n    }, {});\n  }\n\n  getColor(z) {\n    return this.colors[z];\n  }\n\n  render(elem) {\n    // Determine the size of the DOM element\n    const [width, height] = getBounds(elem, { ratio: 0.35 });\n    const dimensions = { width, height };\n\n    this.createSVG(elem, dimensions);\n\n    // TODO How to adjust margin based on labels?\n    const margin = {\n      top: 15,\n      right: 15,\n      bottom: 25,\n      left: 45,\n    };\n\n    // Y-axis\n    const yScale = d3\n      .scaleLinear()\n      .domain(this.getDomainY())\n      .range(this.getRangeY(dimensions, margin));\n\n    let yAxis = d3\n      .axisLeft(yScale)\n      // .tickFormat(yAxisFormat)\n      .tickSize(0)\n      .ticks(8);\n\n    // X-axis\n    const xScale = d3\n      .scaleUtc()\n      .domain(this.getDomainX())\n      .range(this.getRangeX(dimensions, margin));\n\n    let xAxis = d3\n      .axisBottom(xScale)\n      // .tickValues(qs)\n      .tickSizeInner(4);\n    // .tickFormat(ShortQ);\n\n    this.svg\n      .append(\"g\")\n      .attr(\n        \"transform\",\n        `translate(0,${dimensions.height - margin.bottom + 2})`,\n      )\n      .call(xAxis)\n      .call((g) => g.select(\".domain\").remove());\n\n    const GRID_OFFSET = 10; // TODO Setting\n\n    this.svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left - GRID_OFFSET},0)`)\n      .call(yAxis)\n      .call((g) => g.select(\".domain\").remove())\n      .call((g) =>\n        g\n          .selectAll(\".tick line\")\n          .clone()\n          .attr(\"x1\", GRID_OFFSET)\n          .attr(\n            \"x2\",\n            dimensions.width - margin.right - margin.left + GRID_OFFSET,\n          )\n          .attr(\"stroke-opacity\", 0.1),\n      );\n\n    // Construct an area shape.\n    const area = d3\n      .area()\n      .x((d) => xScale(d.data[0]))\n      .y0((d) => yScale(d[0]))\n      .y1((d) => yScale(d[1]));\n\n    // Append a path for each series.\n    this.svg\n      .append(\"g\")\n      .selectAll()\n      .data(this.stack)\n      .join(\"path\")\n      .attr(\"fill\", (d) => this.getColor(d.key))\n      .attr(\"d\", area)\n      .append(\"title\") // TODO Option for title\n      .text((d) => d.key);\n  }\n}\n", "export function getBounds(\n  elem,\n  { ratio = 0.2, maxWidth = 1600, minWidth = 400, minHeight = 300 } = {},\n) {\n  const plot = document.querySelector(elem);\n  let width = d3.min([plot.offsetWidth, maxWidth]);\n  width = d3.max([plot.offsetWidth, minWidth]);\n  let height = d3.max([parseInt(ratio * width), minHeight]);\n  return [width, height];\n}\n", "export class Chart {\n  constructor(data, settings = {}) {\n    // Parse data object, determine:\n    // * x, y, z values as desired types\n    // * items lookup by any property\n    // * color mapping (discrete / scale)\n    // Is defined lookup\n    // grouping? for tooltips?\n    this.parse(data);\n  }\n\n  parse(data) {\n    // TODO This data parse is specific to line series data\n    this.X = this.parseX(data);\n    this.Y = this.parseY(data);\n    this.Z = this.parseZ(data);\n\n    // Defined?\n    // TODO This doesn't work for missing values\n    const defined = (d, i) => !isNaN(this.X[i]) && !isNaN(this.Y[i]);\n    this.D = d3.map(data.values, defined);\n\n    // grouping\n    this.I = d3.range(this.X.length);\n    this.grouping = d3.group(this.I, (i) => this.Z[i]); // {name: [indexes...]}\n\n    // Colors\n    // TODO discrete v continuous?\n    this.setColors(data);\n  }\n\n  parseX(data) {\n    return d3.map(data.values, (d) => d3.isoParse(d[0]));\n  }\n\n  parseY(data) {\n    return d3.map(data.values, (d) => d[1]);\n  }\n\n  parseZ(data) {\n    return d3.map(data.values, (d) => d[2]);\n  }\n\n  getDomainX() {\n    return d3.extent(this.X);\n  }\n\n  getRangeX(dimensions, margin) {\n    return [margin.left, dimensions.width - margin.right];\n  }\n\n  getDomainY() {\n    return d3.extent(this.Y);\n  }\n\n  getRangeY(dimensions, margin) {\n    return [dimensions.height - margin.bottom, margin.top];\n  }\n\n  setColors(data) {\n    const z = data.z.reduce((obj, d) => {\n      obj[d.name] = d.color;\n      return obj;\n    }, {});\n    // TODO Or just use the z object?\n    this.colors = d3\n      .scaleOrdinal()\n      .domain(Object.keys(z))\n      .range(Object.values(z));\n  }\n\n  getColor(z) {\n    return this.colors(z);\n  }\n\n  createSVG(elem, dimensions) {\n    // Clear any existing chart\n    // document.querySelector(this.elem).innerHTML = '';\n    d3.select(elem).selectAll(\"svg\").remove();\n\n    // Create a new chart\n    this.svg = d3\n      .select(elem)\n      .append(\"svg\")\n      .attr(\"viewBox\", [0, 0, dimensions.width, dimensions.height])\n      .attr(\"style\", \"max-width: 100%; height: intrinsic;\")\n      .style(\"-webkit-tap-highlight-color\", \"transparent\")\n      .style(\"font-size\", \"13px\") // TODO Set font size\n      .style(\"overflow\", \"visible\");\n  }\n}\n"],
  "mappings": "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",
  "names": ["area_exports", "__export", "Area", "getBounds", "elem", "ratio", "maxWidth", "minWidth", "minHeight", "plot", "width", "height", "Chart", "data", "settings", "defined", "d", "i", "dimensions", "margin", "z", "obj", "elem", "Area", "Chart", "data", "d", "indexed", "group", "key", "item", "obj", "z", "elem", "width", "height", "getBounds", "dimensions", "margin", "yScale", "yAxis", "xScale", "xAxis", "g", "GRID_OFFSET", "area"]
}
