{
  "version": 3,
  "sources": ["../area.js", "../bounds.js", "../options.js", "../chart.js"],
  "sourcesContent": ["/*\nArea chart\n*/\nimport { getBounds } from \"./bounds\";\nimport { Chart } from \"./chart\";\n\nexport class Area extends Chart {\n  parse(data) {\n    // Get distinct items from the list of Z values\n    this.Z = this.parseZ(data);\n    this.items = new Set(this.Z);\n\n    // Index the data by x, then by z for each x\n    const indexed = d3.index(\n      data,\n      (d) => d3.isoParse(d[0]),\n      (d) => d[2],\n    );\n\n    // Build the stack, one array per item, with an elem for each quarter\n    this.stack = d3\n      .stack()\n      .keys(this.items)\n      .value(([, group], key) => {\n        let item = group.get(key);\n        return item ? item[1] : 0;\n      })(indexed);\n\n    // Use the stack to determine the x and y-axis domains\n    this.X = [...indexed.keys()];\n    this.Y = [0, d3.max(this.stack[this.stack.length - 1], (d) => d[1])];\n\n    this.setColors(data);\n  }\n\n  getDomainX() {\n    return d3.extent(this.X);\n  }\n\n  getDomainY() {\n    return this.Y;\n  }\n\n  render(elem) {\n    // Determine the size of the DOM element\n    const [width, height] = getBounds(elem, { ratio: 0.35 });\n    const dimensions = { width, height };\n\n    this.createSVG(elem, dimensions);\n\n    // TODO How to adjust margin based on labels?\n    const margin = {\n      top: 15,\n      right: 15,\n      bottom: 25,\n      left: 45,\n    };\n\n    // Y-axis\n    const yScale = d3\n      .scaleLinear()\n      .domain(this.getDomainY())\n      .range(this.getRangeY(dimensions, margin));\n\n    let yAxis = d3\n      .axisLeft(yScale)\n      // .tickFormat(yAxisFormat)\n      .tickSize(0)\n      .ticks(8);\n\n    // X-axis\n    const xScale = d3\n      .scaleUtc()\n      .domain(this.getDomainX())\n      .range(this.getRangeX(dimensions, margin));\n\n    let xAxis = d3\n      .axisBottom(xScale)\n      // .tickValues(qs)\n      .tickSizeInner(4);\n    // .tickFormat(ShortQ);\n\n    this.svg\n      .append(\"g\")\n      .attr(\n        \"transform\",\n        `translate(0,${dimensions.height - margin.bottom + 2})`,\n      )\n      .call(xAxis)\n      .call((g) => g.select(\".domain\").remove());\n\n    const GRID_OFFSET = 10; // TODO Setting\n\n    this.svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left - GRID_OFFSET},0)`)\n      .call(yAxis)\n      .call((g) => g.select(\".domain\").remove())\n      .call((g) =>\n        g\n          .selectAll(\".tick line\")\n          .clone()\n          .attr(\"x1\", GRID_OFFSET)\n          .attr(\n            \"x2\",\n            dimensions.width - margin.right - margin.left + GRID_OFFSET,\n          )\n          .attr(\"stroke-opacity\", 0.1),\n      );\n\n    // Construct an area shape.\n    const area = d3\n      .area()\n      .x((d) => xScale(d.data[0]))\n      .y0((d) => yScale(d[0]))\n      .y1((d) => yScale(d[1]));\n\n    // Append a path for each series.\n    this.svg\n      .append(\"g\")\n      .selectAll()\n      .data(this.stack)\n      .join(\"path\")\n      .attr(\"fill\", (d) => this.getColor(d.key))\n      .attr(\"d\", area)\n      .append(\"title\") // TODO Option for title\n      .text((d) => d.key);\n  }\n}\n", "export function getBounds(\n  elem,\n  { ratio = 0.2, maxWidth = 1600, minWidth = 400, minHeight = 300 } = {},\n) {\n  const plot = document.querySelector(elem);\n  let width = d3.min([plot.offsetWidth, maxWidth]);\n  width = d3.max([plot.offsetWidth, minWidth]);\n  let height = d3.max([parseInt(ratio * width), minHeight]);\n  return [width, height];\n}\n", "export class Options {\n  constructor(options = {}) {\n    this.ANIMATION_DURATION_MS = 500;\n    // TODO Allow either number of x-ticks OR minimum x tick spacing\n    this.X_TICK_SIZE = 4;\n    this.X_TICK_GUTTER = 3;\n    this.Y_TICK_SIZE = 0;\n    this.Y_TICK_GUTTER = 5; // Space between tick label and grid\n    this.BAND_PADDING = 0.2; // As a percentage of the band\n    this.VOLUME_OPACITY = 0.6;\n    this.OHLC_COLORS = [\"#1ebc8c\", \"#b2b2b2\", \"#f34d27\"]; // [up, no change, down]\n    this.FONT_SIZE = \"13px\";\n\n    // Line charts\n    this.STROKE_WIDTH = 1.5;\n    this.HIGHLIGHT_STROKE_WIDTH = 2.0;\n    this.UNHIGHLIGHTED_OPACITY = 0.3;\n    this.DOT_RADIUS = 3.0;\n\n    // TODO POINTER MOVE FPS\n\n    // Allow user to override any of the above defaults\n    Object.assign(this, options);\n  }\n}\n\n// TODO Per chart options?\n", "import { Options } from \"./options\";\n\nexport class Chart {\n  // By default, tick format functions are null, which will use the default D3\n  // functions. These can be overridden by sub-classes\n  tickFormatX = null;\n  tickFormatY = null;\n\n  constructor(data, options = {}) {\n    // TODO Or should Options also be a parent class of Chart?\n    this.options = new Options(options);\n\n    // Save the original data in case we want to recalculate\n    this.data = data;\n    this.parse(data);\n  }\n\n  parse(data) {\n    // Parse data object, determine:\n    // * x, y, z values as desired types\n    // * items lookup by any property\n    // * color mapping (discrete / scale)\n    // Is defined lookup\n    // grouping? for tooltips?\n\n    // This data parse is specific to line series data\n    this.X = this.parseX(data);\n    this.Y = this.parseY(data);\n    this.Z = this.parseZ(data);\n\n    // Get distinct items from the list of Z values\n    this.items = new Set(this.Z);\n\n    // Defined?\n    // TODO This doesn't work for missing values\n    const defined = (d, i) => !isNaN(this.X[i]) && !isNaN(this.Y[i]);\n    this.D = d3.map(data, defined);\n\n    // grouping\n    this.I = d3.range(this.X.length);\n    this.grouping = d3.group(this.I, (i) => this.Z[i]); // {name: [indexes...]}\n    // TODO What is grouping used for?\n\n    // Colors\n    // TODO discrete v continuous?\n    this.setColors(data);\n  }\n\n  formatX(value) {\n    // Function for formatting X values, called before sending to hover data callbacks\n    return value;\n  }\n\n  formatY(value) {\n    // Function for formatting Y values, called before sending to hover data callbacks\n    return value;\n  }\n\n  formatZ(key) {\n    // Function for formatting Z values, called before sending to hover data callbacks\n    return key;\n  }\n\n  parseX(data) {\n    return d3.map(data, (d) => d3.isoParse(d[0]));\n  }\n\n  parseY(data) {\n    return d3.map(data, (d) => d[1]);\n  }\n\n  parseZ(data) {\n    return d3.map(data, (d) => d[2]);\n  }\n\n  getDomainX() {\n    return d3.extent(this.X);\n  }\n\n  getRangeX(dimensions, margin) {\n    return [margin.left, dimensions.width - margin.right];\n  }\n\n  getDomainY() {\n    return d3.extent(this.Y);\n  }\n\n  getRangeY(dimensions, margin) {\n    return [dimensions.height - margin.bottom, margin.top];\n  }\n\n  setColors(data) {\n    this.colors = d3\n      .scaleOrdinal()\n      .domain(this.items)\n      .range(d3.schemeCategory10)\n  }\n\n  getColor(z) {\n    return this.colors(z);\n  }\n\n  createSVG(elem, dimensions) {\n    // Clear any existing chart\n    // document.querySelector(this.elem).innerHTML = '';\n    d3.select(elem).selectAll(\"svg\").remove();\n\n    // Create a new chart\n    this.svg = d3\n      .select(elem)\n      .append(\"svg\")\n      .attr(\"viewBox\", [0, 0, dimensions.width, dimensions.height])\n      .attr(\"style\", \"max-width: 100%; height: intrinsic;\")\n      .style(\"-webkit-tap-highlight-color\", \"transparent\")\n      .style(\"font-size\", this.options.FONT_SIZE)\n      .style(\"overflow\", \"visible\");\n  }\n}\n"],
  "mappings": "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",
  "names": ["area_exports", "__export", "Area", "getBounds", "elem", "ratio", "maxWidth", "minWidth", "minHeight", "plot", "width", "height", "Options", "options", "Chart", "data", "options", "__publicField", "Options", "defined", "d", "i", "value", "key", "dimensions", "margin", "z", "elem", "Area", "Chart", "data", "indexed", "d", "group", "key", "item", "elem", "width", "height", "getBounds", "dimensions", "margin", "yScale", "yAxis", "xScale", "xAxis", "g", "GRID_OFFSET", "area"]
}
